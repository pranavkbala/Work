/*
******************************************************************

******************************************************************
************************* Change History *************************
******************************************************************

** Change   Date        Author    Description
**  --      ----------  --------  --------------------------------
**  01      08/20/2021  GVI-283  SQL file created
******************************************************************


** Author			    : GODAVARI Team GVI-283
** Create Date		: August, 2021
** Purpose      	: Apply mapping rules and generate necessary columns for L2_ANALYTICS_TABLES.INVOICE_DETAIL table

******************************************************************

** Source Table 	: L2_STAGE.NETSUITE_INVOICE_DETAIL_STG_TEMP
** Target View  	: INVOICE_DETAIL_STG_VIEW1
** Lookup       	: L2_ANALYTICS_TABLES.ITEM,L2_ANALYTICS_TABLES.INVOICE,L2_ANALYTICS_TABLES.GLOBAL_SUBSIDIARY,L2_ANALYTICS_TABLES.GLOBAL_COST_CENTER

** Transformations	: Apply mapping rules and generate necessary columns for L2_ANALYTICS_TABLES.INVOICE_DETAIL table

******************************************************************
*/

SET spark.sql.broadcastTimeout = 2400;



CREATE OR REPLACE TEMPORARY VIEW INVOICE_DETAIL_STG_VIEW1 AS (
 SELECT
    0 AS INVOICE_DETAIL_KEY,
    CONCAT(CAST(CAST(STG.TRANSACTION_ID AS INT) AS STRING),"-",CAST(CAST(STG.TRANSACTION_LINE_ID AS INT) AS STRING)) AS INVOICE_DETAIL_ID,
    STG.CLASS_NAME AS CONCEPT_CD,
    CAST(CAST(STG.TRANSACTION_ID AS INT)AS STRING) AS INVOICE_ID,    
    COALESCE(CONCAT('N',(CAST(CAST(STG.ITEM_ID AS INT) AS STRING))),'-1') AS ITEM_ID,
    COALESCE(CAST(CAST(STG.LOCATION_ID AS INT) AS STRING),'-1') AS LOCATION_ID,
    CAST(CAST(STG.DEPARTMENT_ID AS INT)AS STRING) AS GLOBAL_COST_CENTER_ID,    
    CAST(CAST(STG.SUBSIDIARY_ID AS INT)AS STRING) AS GLOBAL_SUBSIDIARY_ID,
    STG.DATE_LAST_MODIFIED_GMT AS FIRST_EFFECTIVE_TS,
    COALESCE(CAST(STG.ITEM_COUNT AS INT),0) AS INVOICE_QTY, 
    COALESCE(CAST(STG.NET_AMOUNT AS DECIMAL(15,2)),0) AS INVOICE_AMT, 
    COALESCE(CAST(STG.ITEM_UNIT_PRICE AS DECIMAL(19,6)),0) AS UNIT_PRICE_AMT, 
    COALESCE(CAST(STG.ESTIMATED_COST AS DECIMAL(15,4)),0) AS GLOBAL_ESTIMATED_COST_AMT,
    CAST(STG.SHIPDATE AS DATE) AS ACTUAL_SHIP_DT,
    CAST(CAST(STG.FULFILLMENT_STATUS_ID AS INT) AS STRING) AS FULFILLMENT_STATUS_ID,
    CAST(STG.DISCOUNT_RATE AS DECIMAL(15,4)) AS DISCOUNT_RATE_AMT,
    CAST(STG.ELC__AGENT_COMMISSION AS DECIMAL(15,4)) AS ELC_AGENT_COMMISSION_AMT,
    CAST(STG.ELC__HTS AS DECIMAL(15,4)) AS ELC_HTS_AMT,
    CAST(STG.ELC__FREIGHT AS DECIMAL(15,4)) AS ELC_FREIGHT_AMT,
    CAST(STG.ELC__MISC AS DECIMAL(15,4)) AS ELC_MISC_AMT,
    CAST(STG.FIRST_COST AS DECIMAL(15,4)) AS FIRST_COST_AMT,
    CAST(STG.PACK_GROUP AS INT) AS PACK_GROUP_NBR,
    CAST(STG.QUANTITY_COMMITTED AS INT) AS COMMITTED_QTY,
    CAST(STG.DATE_CLOSED AS DATE) AS CLOSED_DT,
    COALESCE(IV.INVOICE_KEY,-1) AS INVOICE_KEY,
    COALESCE(IV.INVOICE_DT, CAST("9999-12-31" AS DATE)) AS INVOICE_DT,
    COALESCE(I.ITEM_KEY,-1) AS ITEM_KEY,
    COALESCE(L.LOCATION_KEY,-1) AS LOCATION_KEY,
    COALESCE(GS.GLOBAL_SUBSIDIARY_KEY,-1) AS GLOBAL_SUBSIDIARY_KEY, 
    COALESCE(GCC.GLOBAL_COST_CENTER_KEY,-1) AS GLOBAL_COST_CENTER_KEY 
  FROM L2_STAGE.NETSUITE_INVOICE_DETAIL_HIST_STG_TEMP STG 
  LEFT OUTER JOIN L2_ANALYTICS_TABLES.INVOICE IV 
  ON CAST(CAST(STG.TRANSACTION_ID AS INT) AS STRING) = IV.INVOICE_ID AND IV.LAST_EFFECTIVE_TS = '9999-12-31T23:59:59.000+0000' AND IV.SOURCE_SYSTEM = 'GLOBAL_NETSUITE'  
  LEFT OUTER JOIN L2_ANALYTICS_TABLES.ITEM I 
  ON CAST(CAST(STG.ITEM_ID AS INT) AS STRING) = SUBSTR(I.ITEM_ID,2) AND I.SOURCE_SYSTEM = 'GLOBAL_NETSUITE' AND I.LAST_EFFECTIVE_TS = '9999-12-31T23:59:59.000+0000' AND I.MARKET_CD = 'GLOBAL' 
  LEFT OUTER JOIN (SELECT SOURCE_LOCATION_ID AS LOCATION_ID,LOCATION_KEY FROM L2_ANALYTICS_TABLES.LOCATION  WHERE SOURCE_SYSTEM = 'GLOBAL_NETSUITE' AND LAST_EFFECTIVE_TS = '9999-12-31T23:59:59.000+0000' 
  UNION 
  SELECT TRIM(REGEXP_REPLACE(SHIP_NODE_ID,'GLOBAL_NETSUITE','')) AS LOCATION_ID,SHIP_NODE_KEY AS LOCATION_KEY from L2_ANALYTICS_TABLES.SHIP_NODE WHERE SOURCE_SYSTEM = 'GLOBAL_NETSUITE' AND LAST_EFFECTIVE_TS = '9999-12-31T23:59:59.000+0000') L 
  ON CAST(CAST(STG.LOCATION_ID AS INT) AS STRING) = L.LOCATION_ID 
  LEFT OUTER JOIN L2_ANALYTICS_TABLES.GLOBAL_SUBSIDIARY GS 
  ON CAST(CAST(STG.SUBSIDIARY_ID AS INT)AS STRING) = GS.GLOBAL_SUBSIDIARY_ID  AND GS.LAST_EFFECTIVE_TS = '9999-12-31T23:59:59.000+0000' 
  LEFT OUTER JOIN L2_ANALYTICS_TABLES.GLOBAL_COST_CENTER GCC 
  ON CAST(CAST(STG.DEPARTMENT_ID AS INT)AS STRING) = GCC.GLOBAL_COST_CENTER_ID AND GCC.LAST_EFFECTIVE_TS = '9999-12-31T23:59:59.000+0000'  
);



/*
******************************************************************

******************************************************************
************************* Change History *************************
******************************************************************

** Change   Date        Author    Description
**  --      ----------  --------  --------------------------------
**  01      08/20/2021  GVI-283  SQL file created
******************************************************************


** Author			    : GODAVARI Team GVI-283
** Create Date		: August, 2021
** Purpose      	: Populating other columns not coming in from source and the ones not being derived with null

******************************************************************

** Source Table 	   :  INVOICE_DETAIL_STG_VIEW1
** Target View  	   :  INVOICE_DETAIL_STG_VIEW2
** Transformations	 :  Populating other columns not coming in from source and the ones not being derived with null


******************************************************************
*/

CREATE OR REPLACE TEMPORARY VIEW INVOICE_DETAIL_STG_VIEW2 AS (
 SELECT
  STG.INVOICE_DETAIL_KEY AS INVOICE_DETAIL_KEY,
  STG.INVOICE_DETAIL_ID AS INVOICE_DETAIL_ID,
  STG.CONCEPT_CD AS CONCEPT_CD,
  'GLOBAL_NETSUITE' AS SOURCE_SYSTEM,
  null AS PRIME_LINE_SEQ_NBR,
  STG.INVOICE_KEY AS INVOICE_KEY,
  STG.INVOICE_ID AS INVOICE_ID,
  STG.INVOICE_DT AS INVOICE_DT,
  STG.ITEM_KEY AS ITEM_KEY,
  STG.ITEM_ID AS ITEM_ID,
  -1 AS ORDER_LINE_KEY,
  '-1' AS ORDER_LINE_ID,
  STG.LOCATION_KEY AS LOCATION_KEY,
  STG.LOCATION_ID AS LOCATION_ID,
  STG.GLOBAL_COST_CENTER_KEY AS GLOBAL_COST_CENTER_KEY,
  STG.GLOBAL_COST_CENTER_ID AS GLOBAL_COST_CENTER_ID,
  STG.GLOBAL_SUBSIDIARY_KEY AS GLOBAL_SUBSIDIARY_KEY,
  STG.GLOBAL_SUBSIDIARY_ID AS GLOBAL_SUBSIDIARY_ID,
  STG.FIRST_EFFECTIVE_TS AS FIRST_EFFECTIVE_TS,
  '9999-12-31 23:59:59' AS LAST_EFFECTIVE_TS,
  null AS RETAIL_TYPE_CD,
  null AS POS_RING_TYPE_CD,
  null AS TXN_TYPE_CD,
  null AS TXN_SUB_TYPE_CD,
  null AS ENTRY_METHOD,
  null AS SLSPRSN_ID,
  STG.INVOICE_QTY AS INVOICE_QTY,
  STG.INVOICE_AMT AS INVOICE_AMT,
  STG.UNIT_PRICE_AMT AS UNIT_PRICE_AMT,
  STG.GLOBAL_ESTIMATED_COST_AMT AS GLOBAL_ESTIMATED_COST_AMT,
  null AS TXN_SIGN,
  null AS TAXABLE_FLAG,  
  null AS ORIG_TXN_NBR,
  null AS ORIG_UNIT_PRICE_AMT,
  null AS ORIG_TXN_SIGN_CD,
  null AS REASON_ID,
  null AS RETURN_REASON_ID,
  null AS DROP_SHIP_FLAG,
  STG.ACTUAL_SHIP_DT AS ACTUAL_SHIP_DT,
  null AS WEIGHTED_AVG_COST,
  null AS LABOR_COST,
  null AS LABOR_SKU,
  null AS VENDOR_COST,
  null AS PO_EXPENSES,
  null AS PO_DUTY,
  STG.FULFILLMENT_STATUS_ID AS FULFILLMENT_STATUS_ID,
  STG.DISCOUNT_RATE_AMT AS DISCOUNT_RATE_AMT,
  STG.ELC_AGENT_COMMISSION_AMT,
  STG.ELC_HTS_AMT,
  STG.ELC_FREIGHT_AMT,
  STG.ELC_MISC_AMT,
  STG.FIRST_COST_AMT,
  STG.PACK_GROUP_NBR AS PACK_GROUP_NBR,
  STG.COMMITTED_QTY AS COMMITTED_QTY,
  STG.CLOSED_DT AS CLOSED_DT,
  CAST(UNIX_TIMESTAMP(CURRENT_TIMESTAMP(), 'yyyy-MM-dd HH:mm:ss.000') AS TIMESTAMP) AS INSERT_TS,
  CAST(UNIX_TIMESTAMP(CURRENT_TIMESTAMP(), 'yyyy-MM-dd HH:mm:ss.000') AS TIMESTAMP) AS UPDATE_TS 
   FROM INVOICE_DETAIL_STG_VIEW1 STG
);






/*
******************************************************************

******************************************************************
************************* Change History *************************
******************************************************************

** Change   Date        Author    Description
**  --      ----------  --------  --------------------------------
**  01      08/20/2021  GVI-283  SQL file created
******************************************************************

** Author        : GODAVARI Team GVI-283
** Create Date   : August, 2021
** Purpose       : Generate surrogate keys

******************************************************************

** Source Table  : INVOICE_DETAIL_STG_VIEW2
** Target View   : INVOICE_DETAIL_STG_VIEW3

** Transformations :  Generate surrogate keys on INVOICE_DETAIL_KEY


******************************************************************
*/




CREATE OR REPLACE TEMPORARY VIEW INVOICE_DETAIL_STG_VIEW3 AS (
  SELECT
    CASE
        WHEN STG.INVOICE_DETAIL_KEY = 0 THEN
             ROW_NUMBER() OVER (ORDER BY STG.INVOICE_DETAIL_ID, STG.SOURCE_SYSTEM, STG.INVOICE_KEY) + COALESCE(MAX_INVOICE_DETAIL_KEY,0)  /*COALESCE(MAX_INVOICE_DETAIL_KEY, 496380681)*/ 
        ELSE STG.INVOICE_DETAIL_KEY
    END AS INVOICE_DETAIL_KEY,
 STG.INVOICE_DETAIL_ID,
 STG.CONCEPT_CD,
 STG.SOURCE_SYSTEM,
 STG.PRIME_LINE_SEQ_NBR,
 STG.INVOICE_KEY,
 STG.INVOICE_ID,
 STG.INVOICE_DT,
 STG.ITEM_KEY,
 STG.ITEM_ID,
 STG.ORDER_LINE_KEY,
 STG.ORDER_LINE_ID,
 STG.LOCATION_KEY,
 STG.LOCATION_ID,
 STG.GLOBAL_COST_CENTER_KEY,
 STG.GLOBAL_COST_CENTER_ID,
 STG.GLOBAL_SUBSIDIARY_KEY,
 STG.GLOBAL_SUBSIDIARY_ID,
 STG.FIRST_EFFECTIVE_TS,
 STG.LAST_EFFECTIVE_TS,
 STG.RETAIL_TYPE_CD,
 STG.POS_RING_TYPE_CD,
 STG.TXN_TYPE_CD,
 STG.TXN_SUB_TYPE_CD,
 STG.ENTRY_METHOD,
 STG.SLSPRSN_ID,
 STG.INVOICE_QTY,
 STG.INVOICE_AMT,
 STG.UNIT_PRICE_AMT,
 STG.GLOBAL_ESTIMATED_COST_AMT,
 STG.TXN_SIGN,
 STG.TAXABLE_FLAG,
 STG.ORIG_TXN_NBR,
 STG.ORIG_UNIT_PRICE_AMT,
 STG.ORIG_TXN_SIGN_CD,
 STG.REASON_ID,
 STG.RETURN_REASON_ID,
 STG.DROP_SHIP_FLAG,
 STG.ACTUAL_SHIP_DT,
 STG.WEIGHTED_AVG_COST,
 STG.LABOR_COST,
 STG.LABOR_SKU,
 STG.VENDOR_COST,
 STG.PO_EXPENSES,
 STG.PO_DUTY,
 STG.FULFILLMENT_STATUS_ID,
 STG.DISCOUNT_RATE_AMT,
 STG.ELC_AGENT_COMMISSION_AMT,
 STG.ELC_HTS_AMT,
 STG.ELC_FREIGHT_AMT,
 STG.ELC_MISC_AMT,
 STG.FIRST_COST_AMT,
 STG.PACK_GROUP_NBR,
 STG.COMMITTED_QTY,
 STG.CLOSED_DT,
 STG.INSERT_TS,
 STG.UPDATE_TS
  FROM INVOICE_DETAIL_STG_VIEW2 STG
  CROSS JOIN
  (
      SELECT MAX(INVOICE_DETAIL_KEY) AS MAX_INVOICE_DETAIL_KEY FROM L2_ANALYTICS_TABLES.INVOICE_DETAIL WHERE INVOICE_DETAIL_KEY <> -1
  ) TARGET_MAX
);




/* TRUNCATING THE STAGE TABLE AND REINSERTING THE DATA FROM INVOICE_DETAIL_STG_VIEW4  */

       
TRUNCATE TABLE L2_STAGE.NETSUITE_INVOICE_DETAIL_STG;
INSERT INTO L2_STAGE.NETSUITE_INVOICE_DETAIL_STG SELECT * FROM INVOICE_DETAIL_STG_VIEW3;




 /*
 ******************************************************************

 ******************************************************************
 ************************* Change History *************************
 ******************************************************************

 ** Change   Date        Author    Description
 **  --      ----------  --------  --------------------------------
 **  01      08/20/2021  GVI-283  SQL file created
 ******************************************************************

 ** Author        : Godavari Team GVI-283
 ** Create Date   : August, 2021
 ** Purpose       : Insert hist data into L2_ANALYTICS_TABLES.INVOICE_DETAIL

 ******************************************************************

 ** Source View     :  NETSUITE_INVOICE_DETAIL_STG
 ** Target Table    :  L2_ANALYTICS_TABLES.INVOICE_DETAIL
 ** Transformations :  INSERT HIST DATA into L2_ANALYTICS_TABLES.INVOICE_DETAIL

 ******************************************************************
 */




MERGE INTO L2_ANALYTICS_TABLES.INVOICE_DETAIL tgt USING 
   ( 
    select INVOICE_DETAIL_ID,SOURCE_SYSTEM, GLOBAL_ESTIMATED_COST_AMT from L2_STAGE.NETSUITE_INVOICE_DETAIL_STG
    )stg
    ON tgt.INVOICE_DETAIL_ID = stg.INVOICE_DETAIL_ID and tgt.SOURCE_SYSTEM = stg.SOURCE_SYSTEM and tgt.LAST_EFFECTIVE_TS = '9999-12-31T23:59:59.000+0000'
      when matched then 
       UPDATE SET 
        tgt.GLOBAL_ESTIMATED_COST_AMT = stg.GLOBAL_ESTIMATED_COST_AMT ;




/*
** Source Table   : L2_ANALYTICS_TABLES.INVOICE_DETAIL
** Target Table    : L2_ANALYTICS_TABLES.INVOICE_DETAIL
** Optimize delta data for LAST_EFFECTIVE_TS
**
*/


OPTIMIZE L2_ANALYTICS_TABLES.INVOICE_DETAIL ZORDER BY LAST_EFFECTIVE_TS  ;




/*
** Source Table   : L2_STAGE.NETSUITE_INVOICE_DETAIL_STG
** Target Table    : L1_AUDIT.CHECKPOINT_LOG
** INSERT max DATE_LAST_MODIFIED_GMT value in L1_AUDIT.CHECKPOINT_LOG for invoice_detail daily job to pick up records post this date
**
*/




INSERT INTO L1_AUDIT.CHECKPOINT_LOG VALUES ('NETSUITE_INVOICE_DETAIL','NETSUITE_INVOICE_DETAIL',current_timestamp,'Administrator.TRANSACTION_LINES','DATE_LAST_MODIFIED_GMT','9999-12-31 00:00:00',NULL,NULL,NULL,NULL,NULL,NULL);
UPDATE L1_AUDIT.CHECKPOINT_LOG SET CHECKPOINT_VALUE_1 = (select max(FIRST_EFFECTIVE_TS) from L2_STAGE.NETSUITE_INVOICE_DETAIL_STG) WHERE EXTRACT_ID = 'NETSUITE_INVOICE_DETAIL' and CHECKPOINT_VALUE_1 = '9999-12-31 00:00:00' ;
UPDATE L1_AUDIT.CHECKPOINT_LOG SET CHECKPOINT_VALUE_1 = (from_unixtime(unix_timestamp(CHECKPOINT_VALUE_1,'yyyy-MM-dd HH:mm:ss'), 'dd-MM-yyyy HH:mm:ss')) WHERE EXTRACT_ID = 'NETSUITE_INVOICE_DETAIL' ;
